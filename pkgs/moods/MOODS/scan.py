# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _scan
else:
    import _scan

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _scan.delete_SwigPyIterator

    def value(self):
        return _scan.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _scan.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _scan.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _scan.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _scan.SwigPyIterator_equal(self, x)

    def copy(self):
        return _scan.SwigPyIterator_copy(self)

    def next(self):
        return _scan.SwigPyIterator_next(self)

    def __next__(self):
        return _scan.SwigPyIterator___next__(self)

    def previous(self):
        return _scan.SwigPyIterator_previous(self)

    def advance(self, n):
        return _scan.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _scan.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _scan.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _scan.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _scan.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _scan.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _scan.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _scan:
_scan.SwigPyIterator_swigregister(SwigPyIterator)

class vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_double___nonzero__(self)

    def __bool__(self):
        return _scan.vector_double___bool__(self)

    def __len__(self):
        return _scan.vector_double___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_double___setitem__(self, *args)

    def pop(self):
        return _scan.vector_double_pop(self)

    def append(self, x):
        return _scan.vector_double_append(self, x)

    def empty(self):
        return _scan.vector_double_empty(self)

    def size(self):
        return _scan.vector_double_size(self)

    def swap(self, v):
        return _scan.vector_double_swap(self, v)

    def begin(self):
        return _scan.vector_double_begin(self)

    def end(self):
        return _scan.vector_double_end(self)

    def rbegin(self):
        return _scan.vector_double_rbegin(self)

    def rend(self):
        return _scan.vector_double_rend(self)

    def clear(self):
        return _scan.vector_double_clear(self)

    def get_allocator(self):
        return _scan.vector_double_get_allocator(self)

    def pop_back(self):
        return _scan.vector_double_pop_back(self)

    def erase(self, *args):
        return _scan.vector_double_erase(self, *args)

    def __init__(self, *args):
        _scan.vector_double_swiginit(self, _scan.new_vector_double(*args))

    def push_back(self, x):
        return _scan.vector_double_push_back(self, x)

    def front(self):
        return _scan.vector_double_front(self)

    def back(self):
        return _scan.vector_double_back(self)

    def assign(self, n, x):
        return _scan.vector_double_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_double_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_double_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_double_reserve(self, n)

    def capacity(self):
        return _scan.vector_double_capacity(self)
    __swig_destroy__ = _scan.delete_vector_double

# Register vector_double in _scan:
_scan.vector_double_swigregister(vector_double)

class vector_uchar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_uchar_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_uchar___nonzero__(self)

    def __bool__(self):
        return _scan.vector_uchar___bool__(self)

    def __len__(self):
        return _scan.vector_uchar___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_uchar___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_uchar___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_uchar___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_uchar___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_uchar___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_uchar___setitem__(self, *args)

    def pop(self):
        return _scan.vector_uchar_pop(self)

    def append(self, x):
        return _scan.vector_uchar_append(self, x)

    def empty(self):
        return _scan.vector_uchar_empty(self)

    def size(self):
        return _scan.vector_uchar_size(self)

    def swap(self, v):
        return _scan.vector_uchar_swap(self, v)

    def begin(self):
        return _scan.vector_uchar_begin(self)

    def end(self):
        return _scan.vector_uchar_end(self)

    def rbegin(self):
        return _scan.vector_uchar_rbegin(self)

    def rend(self):
        return _scan.vector_uchar_rend(self)

    def clear(self):
        return _scan.vector_uchar_clear(self)

    def get_allocator(self):
        return _scan.vector_uchar_get_allocator(self)

    def pop_back(self):
        return _scan.vector_uchar_pop_back(self)

    def erase(self, *args):
        return _scan.vector_uchar_erase(self, *args)

    def __init__(self, *args):
        _scan.vector_uchar_swiginit(self, _scan.new_vector_uchar(*args))

    def push_back(self, x):
        return _scan.vector_uchar_push_back(self, x)

    def front(self):
        return _scan.vector_uchar_front(self)

    def back(self):
        return _scan.vector_uchar_back(self)

    def assign(self, n, x):
        return _scan.vector_uchar_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_uchar_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_uchar_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_uchar_reserve(self, n)

    def capacity(self):
        return _scan.vector_uchar_capacity(self)
    __swig_destroy__ = _scan.delete_vector_uchar

# Register vector_uchar in _scan:
_scan.vector_uchar_swigregister(vector_uchar)

class vector_size_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_size_t_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_size_t___nonzero__(self)

    def __bool__(self):
        return _scan.vector_size_t___bool__(self)

    def __len__(self):
        return _scan.vector_size_t___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_size_t___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_size_t___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_size_t___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_size_t___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_size_t___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_size_t___setitem__(self, *args)

    def pop(self):
        return _scan.vector_size_t_pop(self)

    def append(self, x):
        return _scan.vector_size_t_append(self, x)

    def empty(self):
        return _scan.vector_size_t_empty(self)

    def size(self):
        return _scan.vector_size_t_size(self)

    def swap(self, v):
        return _scan.vector_size_t_swap(self, v)

    def begin(self):
        return _scan.vector_size_t_begin(self)

    def end(self):
        return _scan.vector_size_t_end(self)

    def rbegin(self):
        return _scan.vector_size_t_rbegin(self)

    def rend(self):
        return _scan.vector_size_t_rend(self)

    def clear(self):
        return _scan.vector_size_t_clear(self)

    def get_allocator(self):
        return _scan.vector_size_t_get_allocator(self)

    def pop_back(self):
        return _scan.vector_size_t_pop_back(self)

    def erase(self, *args):
        return _scan.vector_size_t_erase(self, *args)

    def __init__(self, *args):
        _scan.vector_size_t_swiginit(self, _scan.new_vector_size_t(*args))

    def push_back(self, x):
        return _scan.vector_size_t_push_back(self, x)

    def front(self):
        return _scan.vector_size_t_front(self)

    def back(self):
        return _scan.vector_size_t_back(self)

    def assign(self, n, x):
        return _scan.vector_size_t_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_size_t_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_size_t_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_size_t_reserve(self, n)

    def capacity(self):
        return _scan.vector_size_t_capacity(self)
    __swig_destroy__ = _scan.delete_vector_size_t

# Register vector_size_t in _scan:
_scan.vector_size_t_swigregister(vector_size_t)

class vector_vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_vector_double___nonzero__(self)

    def __bool__(self):
        return _scan.vector_vector_double___bool__(self)

    def __len__(self):
        return _scan.vector_vector_double___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_vector_double___setitem__(self, *args)

    def pop(self):
        return _scan.vector_vector_double_pop(self)

    def append(self, x):
        return _scan.vector_vector_double_append(self, x)

    def empty(self):
        return _scan.vector_vector_double_empty(self)

    def size(self):
        return _scan.vector_vector_double_size(self)

    def swap(self, v):
        return _scan.vector_vector_double_swap(self, v)

    def begin(self):
        return _scan.vector_vector_double_begin(self)

    def end(self):
        return _scan.vector_vector_double_end(self)

    def rbegin(self):
        return _scan.vector_vector_double_rbegin(self)

    def rend(self):
        return _scan.vector_vector_double_rend(self)

    def clear(self):
        return _scan.vector_vector_double_clear(self)

    def get_allocator(self):
        return _scan.vector_vector_double_get_allocator(self)

    def pop_back(self):
        return _scan.vector_vector_double_pop_back(self)

    def erase(self, *args):
        return _scan.vector_vector_double_erase(self, *args)

    def __init__(self, *args):
        _scan.vector_vector_double_swiginit(self, _scan.new_vector_vector_double(*args))

    def push_back(self, x):
        return _scan.vector_vector_double_push_back(self, x)

    def front(self):
        return _scan.vector_vector_double_front(self)

    def back(self):
        return _scan.vector_vector_double_back(self)

    def assign(self, n, x):
        return _scan.vector_vector_double_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_vector_double_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_vector_double_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_vector_double_reserve(self, n)

    def capacity(self):
        return _scan.vector_vector_double_capacity(self)
    __swig_destroy__ = _scan.delete_vector_vector_double

# Register vector_vector_double in _scan:
_scan.vector_vector_double_swigregister(vector_vector_double)

class vector_vector_vector_double(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_vector_vector_double_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_vector_vector_double___nonzero__(self)

    def __bool__(self):
        return _scan.vector_vector_vector_double___bool__(self)

    def __len__(self):
        return _scan.vector_vector_vector_double___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_vector_vector_double___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_vector_vector_double___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_vector_vector_double___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_vector_vector_double___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_vector_vector_double___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_vector_vector_double___setitem__(self, *args)

    def pop(self):
        return _scan.vector_vector_vector_double_pop(self)

    def append(self, x):
        return _scan.vector_vector_vector_double_append(self, x)

    def empty(self):
        return _scan.vector_vector_vector_double_empty(self)

    def size(self):
        return _scan.vector_vector_vector_double_size(self)

    def swap(self, v):
        return _scan.vector_vector_vector_double_swap(self, v)

    def begin(self):
        return _scan.vector_vector_vector_double_begin(self)

    def end(self):
        return _scan.vector_vector_vector_double_end(self)

    def rbegin(self):
        return _scan.vector_vector_vector_double_rbegin(self)

    def rend(self):
        return _scan.vector_vector_vector_double_rend(self)

    def clear(self):
        return _scan.vector_vector_vector_double_clear(self)

    def get_allocator(self):
        return _scan.vector_vector_vector_double_get_allocator(self)

    def pop_back(self):
        return _scan.vector_vector_vector_double_pop_back(self)

    def erase(self, *args):
        return _scan.vector_vector_vector_double_erase(self, *args)

    def __init__(self, *args):
        _scan.vector_vector_vector_double_swiginit(self, _scan.new_vector_vector_vector_double(*args))

    def push_back(self, x):
        return _scan.vector_vector_vector_double_push_back(self, x)

    def front(self):
        return _scan.vector_vector_vector_double_front(self)

    def back(self):
        return _scan.vector_vector_vector_double_back(self)

    def assign(self, n, x):
        return _scan.vector_vector_vector_double_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_vector_vector_double_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_vector_vector_double_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_vector_vector_double_reserve(self, n)

    def capacity(self):
        return _scan.vector_vector_vector_double_capacity(self)
    __swig_destroy__ = _scan.delete_vector_vector_vector_double

# Register vector_vector_vector_double in _scan:
_scan.vector_vector_vector_double_swigregister(vector_vector_vector_double)

class vector_match(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_match_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_match___nonzero__(self)

    def __bool__(self):
        return _scan.vector_match___bool__(self)

    def __len__(self):
        return _scan.vector_match___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_match___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_match___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_match___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_match___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_match___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_match___setitem__(self, *args)

    def pop(self):
        return _scan.vector_match_pop(self)

    def append(self, x):
        return _scan.vector_match_append(self, x)

    def empty(self):
        return _scan.vector_match_empty(self)

    def size(self):
        return _scan.vector_match_size(self)

    def swap(self, v):
        return _scan.vector_match_swap(self, v)

    def begin(self):
        return _scan.vector_match_begin(self)

    def end(self):
        return _scan.vector_match_end(self)

    def rbegin(self):
        return _scan.vector_match_rbegin(self)

    def rend(self):
        return _scan.vector_match_rend(self)

    def clear(self):
        return _scan.vector_match_clear(self)

    def get_allocator(self):
        return _scan.vector_match_get_allocator(self)

    def pop_back(self):
        return _scan.vector_match_pop_back(self)

    def erase(self, *args):
        return _scan.vector_match_erase(self, *args)

    def __init__(self, *args):
        _scan.vector_match_swiginit(self, _scan.new_vector_match(*args))

    def push_back(self, x):
        return _scan.vector_match_push_back(self, x)

    def front(self):
        return _scan.vector_match_front(self)

    def back(self):
        return _scan.vector_match_back(self)

    def assign(self, n, x):
        return _scan.vector_match_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_match_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_match_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_match_reserve(self, n)

    def capacity(self):
        return _scan.vector_match_capacity(self)
    __swig_destroy__ = _scan.delete_vector_match

# Register vector_match in _scan:
_scan.vector_match_swigregister(vector_match)

class vector_vector_match(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_vector_match_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_vector_match___nonzero__(self)

    def __bool__(self):
        return _scan.vector_vector_match___bool__(self)

    def __len__(self):
        return _scan.vector_vector_match___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_vector_match___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_vector_match___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_vector_match___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_vector_match___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_vector_match___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_vector_match___setitem__(self, *args)

    def pop(self):
        return _scan.vector_vector_match_pop(self)

    def append(self, x):
        return _scan.vector_vector_match_append(self, x)

    def empty(self):
        return _scan.vector_vector_match_empty(self)

    def size(self):
        return _scan.vector_vector_match_size(self)

    def swap(self, v):
        return _scan.vector_vector_match_swap(self, v)

    def begin(self):
        return _scan.vector_vector_match_begin(self)

    def end(self):
        return _scan.vector_vector_match_end(self)

    def rbegin(self):
        return _scan.vector_vector_match_rbegin(self)

    def rend(self):
        return _scan.vector_vector_match_rend(self)

    def clear(self):
        return _scan.vector_vector_match_clear(self)

    def get_allocator(self):
        return _scan.vector_vector_match_get_allocator(self)

    def pop_back(self):
        return _scan.vector_vector_match_pop_back(self)

    def erase(self, *args):
        return _scan.vector_vector_match_erase(self, *args)

    def __init__(self, *args):
        _scan.vector_vector_match_swiginit(self, _scan.new_vector_vector_match(*args))

    def push_back(self, x):
        return _scan.vector_vector_match_push_back(self, x)

    def front(self):
        return _scan.vector_vector_match_front(self)

    def back(self):
        return _scan.vector_vector_match_back(self)

    def assign(self, n, x):
        return _scan.vector_vector_match_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_vector_match_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_vector_match_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_vector_match_reserve(self, n)

    def capacity(self):
        return _scan.vector_vector_match_capacity(self)
    __swig_destroy__ = _scan.delete_vector_vector_match

# Register vector_vector_match in _scan:
_scan.vector_vector_match_swigregister(vector_vector_match)

class vector_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_string___nonzero__(self)

    def __bool__(self):
        return _scan.vector_string___bool__(self)

    def __len__(self):
        return _scan.vector_string___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_string___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_string___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_string___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_string___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_string___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_string___setitem__(self, *args)

    def pop(self):
        return _scan.vector_string_pop(self)

    def append(self, x):
        return _scan.vector_string_append(self, x)

    def empty(self):
        return _scan.vector_string_empty(self)

    def size(self):
        return _scan.vector_string_size(self)

    def swap(self, v):
        return _scan.vector_string_swap(self, v)

    def begin(self):
        return _scan.vector_string_begin(self)

    def end(self):
        return _scan.vector_string_end(self)

    def rbegin(self):
        return _scan.vector_string_rbegin(self)

    def rend(self):
        return _scan.vector_string_rend(self)

    def clear(self):
        return _scan.vector_string_clear(self)

    def get_allocator(self):
        return _scan.vector_string_get_allocator(self)

    def pop_back(self):
        return _scan.vector_string_pop_back(self)

    def erase(self, *args):
        return _scan.vector_string_erase(self, *args)

    def __init__(self, *args):
        _scan.vector_string_swiginit(self, _scan.new_vector_string(*args))

    def push_back(self, x):
        return _scan.vector_string_push_back(self, x)

    def front(self):
        return _scan.vector_string_front(self)

    def back(self):
        return _scan.vector_string_back(self)

    def assign(self, n, x):
        return _scan.vector_string_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_string_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_string_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_string_reserve(self, n)

    def capacity(self):
        return _scan.vector_string_capacity(self)
    __swig_destroy__ = _scan.delete_vector_string

# Register vector_string in _scan:
_scan.vector_string_swigregister(vector_string)

class vector_variant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_variant_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_variant___nonzero__(self)

    def __bool__(self):
        return _scan.vector_variant___bool__(self)

    def __len__(self):
        return _scan.vector_variant___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_variant___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_variant___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_variant___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_variant___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_variant___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_variant___setitem__(self, *args)

    def pop(self):
        return _scan.vector_variant_pop(self)

    def append(self, x):
        return _scan.vector_variant_append(self, x)

    def empty(self):
        return _scan.vector_variant_empty(self)

    def size(self):
        return _scan.vector_variant_size(self)

    def swap(self, v):
        return _scan.vector_variant_swap(self, v)

    def begin(self):
        return _scan.vector_variant_begin(self)

    def end(self):
        return _scan.vector_variant_end(self)

    def rbegin(self):
        return _scan.vector_variant_rbegin(self)

    def rend(self):
        return _scan.vector_variant_rend(self)

    def clear(self):
        return _scan.vector_variant_clear(self)

    def get_allocator(self):
        return _scan.vector_variant_get_allocator(self)

    def pop_back(self):
        return _scan.vector_variant_pop_back(self)

    def erase(self, *args):
        return _scan.vector_variant_erase(self, *args)

    def __init__(self, *args):
        _scan.vector_variant_swiginit(self, _scan.new_vector_variant(*args))

    def push_back(self, x):
        return _scan.vector_variant_push_back(self, x)

    def front(self):
        return _scan.vector_variant_front(self)

    def back(self):
        return _scan.vector_variant_back(self)

    def assign(self, n, x):
        return _scan.vector_variant_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_variant_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_variant_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_variant_reserve(self, n)

    def capacity(self):
        return _scan.vector_variant_capacity(self)
    __swig_destroy__ = _scan.delete_vector_variant

# Register vector_variant in _scan:
_scan.vector_variant_swigregister(vector_variant)

class vector_match_variant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_match_variant_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_match_variant___nonzero__(self)

    def __bool__(self):
        return _scan.vector_match_variant___bool__(self)

    def __len__(self):
        return _scan.vector_match_variant___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_match_variant___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_match_variant___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_match_variant___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_match_variant___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_match_variant___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_match_variant___setitem__(self, *args)

    def pop(self):
        return _scan.vector_match_variant_pop(self)

    def append(self, x):
        return _scan.vector_match_variant_append(self, x)

    def empty(self):
        return _scan.vector_match_variant_empty(self)

    def size(self):
        return _scan.vector_match_variant_size(self)

    def swap(self, v):
        return _scan.vector_match_variant_swap(self, v)

    def begin(self):
        return _scan.vector_match_variant_begin(self)

    def end(self):
        return _scan.vector_match_variant_end(self)

    def rbegin(self):
        return _scan.vector_match_variant_rbegin(self)

    def rend(self):
        return _scan.vector_match_variant_rend(self)

    def clear(self):
        return _scan.vector_match_variant_clear(self)

    def get_allocator(self):
        return _scan.vector_match_variant_get_allocator(self)

    def pop_back(self):
        return _scan.vector_match_variant_pop_back(self)

    def erase(self, *args):
        return _scan.vector_match_variant_erase(self, *args)

    def __init__(self, *args):
        _scan.vector_match_variant_swiginit(self, _scan.new_vector_match_variant(*args))

    def push_back(self, x):
        return _scan.vector_match_variant_push_back(self, x)

    def front(self):
        return _scan.vector_match_variant_front(self)

    def back(self):
        return _scan.vector_match_variant_back(self)

    def assign(self, n, x):
        return _scan.vector_match_variant_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_match_variant_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_match_variant_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_match_variant_reserve(self, n)

    def capacity(self):
        return _scan.vector_match_variant_capacity(self)
    __swig_destroy__ = _scan.delete_vector_match_variant

# Register vector_match_variant in _scan:
_scan.vector_match_variant_swigregister(vector_match_variant)

class vector_vector_match_variant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self):
        return _scan.vector_vector_match_variant_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _scan.vector_vector_match_variant___nonzero__(self)

    def __bool__(self):
        return _scan.vector_vector_match_variant___bool__(self)

    def __len__(self):
        return _scan.vector_vector_match_variant___len__(self)

    def __getslice__(self, i, j):
        return _scan.vector_vector_match_variant___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _scan.vector_vector_match_variant___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _scan.vector_vector_match_variant___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _scan.vector_vector_match_variant___delitem__(self, *args)

    def __getitem__(self, *args):
        return _scan.vector_vector_match_variant___getitem__(self, *args)

    def __setitem__(self, *args):
        return _scan.vector_vector_match_variant___setitem__(self, *args)

    def pop(self):
        return _scan.vector_vector_match_variant_pop(self)

    def append(self, x):
        return _scan.vector_vector_match_variant_append(self, x)

    def empty(self):
        return _scan.vector_vector_match_variant_empty(self)

    def size(self):
        return _scan.vector_vector_match_variant_size(self)

    def swap(self, v):
        return _scan.vector_vector_match_variant_swap(self, v)

    def begin(self):
        return _scan.vector_vector_match_variant_begin(self)

    def end(self):
        return _scan.vector_vector_match_variant_end(self)

    def rbegin(self):
        return _scan.vector_vector_match_variant_rbegin(self)

    def rend(self):
        return _scan.vector_vector_match_variant_rend(self)

    def clear(self):
        return _scan.vector_vector_match_variant_clear(self)

    def get_allocator(self):
        return _scan.vector_vector_match_variant_get_allocator(self)

    def pop_back(self):
        return _scan.vector_vector_match_variant_pop_back(self)

    def erase(self, *args):
        return _scan.vector_vector_match_variant_erase(self, *args)

    def __init__(self, *args):
        _scan.vector_vector_match_variant_swiginit(self, _scan.new_vector_vector_match_variant(*args))

    def push_back(self, x):
        return _scan.vector_vector_match_variant_push_back(self, x)

    def front(self):
        return _scan.vector_vector_match_variant_front(self)

    def back(self):
        return _scan.vector_vector_match_variant_back(self)

    def assign(self, n, x):
        return _scan.vector_vector_match_variant_assign(self, n, x)

    def resize(self, *args):
        return _scan.vector_vector_match_variant_resize(self, *args)

    def insert(self, *args):
        return _scan.vector_vector_match_variant_insert(self, *args)

    def reserve(self, n):
        return _scan.vector_vector_match_variant_reserve(self, n)

    def capacity(self):
        return _scan.vector_vector_match_variant_capacity(self)
    __swig_destroy__ = _scan.delete_vector_vector_match_variant

# Register vector_vector_match_variant in _scan:
_scan.vector_vector_match_variant_swigregister(vector_vector_match_variant)


def scan_dna(seq, matrices, bg, thresholds, window_size=7):
    return _scan.scan_dna(seq, matrices, bg, thresholds, window_size)

def scan(seq, matrices, bg, thresholds, window_size, alphabet):
    return _scan.scan(seq, matrices, bg, thresholds, window_size, alphabet)

def scan_best_hits_dna(seq, matrices, target, iterations=10, MULT=2, LIMIT_MULT=10, window_size=7):
    return _scan.scan_best_hits_dna(seq, matrices, target, iterations, MULT, LIMIT_MULT, window_size)

def naive_scan_dna(*args):
    return _scan.naive_scan_dna(*args)
class match(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    pos = property(_scan.match_pos_get, _scan.match_pos_set)
    score = property(_scan.match_score_get, _scan.match_score_set)

    def __init__(self):
        _scan.match_swiginit(self, _scan.new_match())
    __swig_destroy__ = _scan.delete_match

# Register match in _scan:
_scan.match_swigregister(match)

class variant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    start_pos = property(_scan.variant_start_pos_get, _scan.variant_start_pos_set)
    end_pos = property(_scan.variant_end_pos_get, _scan.variant_end_pos_set)
    modified_seq = property(_scan.variant_modified_seq_get, _scan.variant_modified_seq_set)

    def __lt__(self, rhs):
        return _scan.variant___lt__(self, rhs)

    def __init__(self, *args):
        _scan.variant_swiginit(self, _scan.new_variant(*args))
    __swig_destroy__ = _scan.delete_variant

# Register variant in _scan:
_scan.variant_swigregister(variant)

class match_with_variant(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    pos = property(_scan.match_with_variant_pos_get, _scan.match_with_variant_pos_set)
    score = property(_scan.match_with_variant_score_get, _scan.match_with_variant_score_set)
    variants = property(_scan.match_with_variant_variants_get, _scan.match_with_variant_variants_set)

    def __init__(self):
        _scan.match_with_variant_swiginit(self, _scan.new_match_with_variant())
    __swig_destroy__ = _scan.delete_match_with_variant

# Register match_with_variant in _scan:
_scan.match_with_variant_swigregister(match_with_variant)

class Scanner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _scan.Scanner_swiginit(self, _scan.new_Scanner(*args))

    def set_motifs(self, matrices, bg, thresholds):
        return _scan.Scanner_set_motifs(self, matrices, bg, thresholds)

    def scan(self, s):
        return _scan.Scanner_scan(self, s)

    def scan_max_hits(self, s, max_hits):
        return _scan.Scanner_scan_max_hits(self, s, max_hits)

    def variant_matches(self, seq, variants, max_depth=0):
        return _scan.Scanner_variant_matches(self, seq, variants, max_depth)
    __swig_destroy__ = _scan.delete_Scanner

# Register Scanner in _scan:
_scan.Scanner_swigregister(Scanner)



